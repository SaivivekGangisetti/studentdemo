package com.klu.crud;

import com.example.studentapi.model.Student;
import com.example.studentapi.repository.StudentRepository;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;


import java.util.List;


@Service
public class StudentService {
private final StudentRepository repo;


public StudentService(StudentRepository repo) {
this.repo = repo;
}


public List<Student> findAll() {
return repo.findAll();
}


public Student findById(Long id) {
return repo.findById(id)
.orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Student not found"));
}


public Student create(Student s) {
if (repo.existsByEmail(s.getEmail())) {
throw new ResponseStatusException(HttpStatus.CONFLICT, "Email already exists");
}
return repo.save(s);
}


public Student update(Long id, Student update) {
Student existing = findById(id);
// If email changed, ensure uniqueness
if (!existing.getEmail().equalsIgnoreCase(update.getEmail()) && repo.existsByEmail(update.getEmail())) {
throw new ResponseStatusException(HttpStatus.CONFLICT, "Email already exists");
}
existing.setName(update.getName());
existing.setEmail(update.getEmail());
existing.setAge(update.getAge());
existing.setCourse(update.getCourse());
return repo.save(existing);
}


public void delete(Long id) {
if (!repo.existsById(id)) {
throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Student not found");
}
repo.deleteById(id);
}}